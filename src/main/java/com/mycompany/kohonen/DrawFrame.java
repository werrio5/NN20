/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.kohonen;

import java.awt.Color;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author pavel
 */
public class DrawFrame extends javax.swing.JFrame {
    
    private SOMMap map;
    private LVQ lvq;
    
    /**
     * Creates new form DrawFrame
     */
    public DrawFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        mapWidthTextField = new javax.swing.JTextField();
        mapHeightTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        LRTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        iterationsTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        scaleTextField = new javax.swing.JTextField();
        trainButton = new javax.swing.JButton();
        InputVectorTextField = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        inputTestDataButton = new javax.swing.JButton();
        testDataComboBox = new javax.swing.JComboBox<>();
        LVQTrainButton = new javax.swing.JButton();
        LVQTestButton = new javax.swing.JButton();
        LVQTestDataComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        settingsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("узлов W x H");

        mapWidthTextField.setText("50");
        mapWidthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputChanged(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputChanged(evt);
            }
        });

        mapHeightTextField.setText("50");
        mapHeightTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputChanged(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputChanged(evt);
            }
        });

        jLabel2.setText("Learning rate");

        LRTextField.setText("0.1");
        LRTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputChanged(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputChanged(evt);
            }
        });

        jLabel3.setText("Iterations");

        iterationsTextField.setText("1000");
        iterationsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputChanged(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputChanged(evt);
            }
        });

        jLabel4.setText("Draw scale");

        scaleTextField.setText("5");
        scaleTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputChanged(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputChanged(evt);
            }
        });

        trainButton.setText("Train");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });

        InputVectorTextField.setText("255,255,255");

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Train (dataset)");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        inputTestDataButton.setText("test");
        inputTestDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTestDataButtonActionPerformed(evt);
            }
        });

        testDataComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        LVQTrainButton.setText("LVQ train");
        LVQTrainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LVQTrainButtonActionPerformed(evt);
            }
        });

        LVQTestButton.setText("test");
        LVQTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LVQTestButtonActionPerformed(evt);
            }
        });

        LVQTestDataComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mapWidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mapHeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(iterationsTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                    .addComponent(LRTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(scaleTextField)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(trainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(InputVectorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(LVQTrainButton)
                                    .addGroup(settingsPanelLayout.createSequentialGroup()
                                        .addComponent(inputTestDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(testDataComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(settingsPanelLayout.createSequentialGroup()
                                        .addComponent(LVQTestButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(LVQTestDataComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(6, 6, 6)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(loadButton)
                .addGap(80, 80, 80))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mapHeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mapWidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(LRTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(iterationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(scaleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(trainButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputVectorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadButton)
                .addGap(12, 12, 12)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputTestDataButton)
                    .addComponent(testDataComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(LVQTrainButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LVQTestButton)
                    .addComponent(LVQTestDataComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(593, Short.MAX_VALUE)
                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /**
     * проверка полей ввода на наличие ошибок
     * @return true - есть ошибки, false - нет
     */
    private boolean checkInput(){
        //флаг ошибок
        boolean hasErrors = false;
        
        //обычный цвет полей ввода 
        Color defaultColor = new Color(255,255,255);
        
        //цвет ошибки
        Color errorColor = Color.red;
        
        //#width nodes
        try{            
            int width = Integer.valueOf(mapWidthTextField.getText());
            mapWidthTextField.setBackground(defaultColor);
        }catch(NumberFormatException e){
            mapWidthTextField.setBackground(errorColor);
            hasErrors = true;
        }
        
        //#height nodes
        try{            
            int height = Integer.valueOf(mapHeightTextField.getText());
            mapHeightTextField.setBackground(defaultColor);
        }catch(NumberFormatException e){
            mapHeightTextField.setBackground(errorColor);
            hasErrors = true;
        }
        
        //learning rate
        try{            
            double learningRate = Double.valueOf(LRTextField.getText());
            LRTextField.setBackground(defaultColor);
        }catch(NumberFormatException e){
            LRTextField.setBackground(errorColor);
            hasErrors = true;
        }
        
        //#iterations
        try{            
            int iterations = Integer.valueOf(iterationsTextField.getText());
            iterationsTextField.setBackground(defaultColor);
        }catch(NumberFormatException e){
            iterationsTextField.setBackground(errorColor);
            hasErrors = true;
        }
        
        //scale
        try{            
            int scale = Integer.valueOf(scaleTextField.getText());
            scaleTextField.setBackground(defaultColor);
        }catch(NumberFormatException e){
            scaleTextField.setBackground(errorColor);
            hasErrors = true;
        }
        
        return hasErrors;
    }
    
    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
        //проверка ввода на ошибки
        boolean inputHasErrors = checkInput();
        
        //если ввод без ошибок
        if(!inputHasErrors){
            
            //создать карту
            map = initKohonenMap();
            
            //train set
            map.addTrainVector(new Integer[] {255,0,0}, "red");//r
            map.addTrainVector(new Integer[] {0,128,0}, "green");//g
            map.addTrainVector(new Integer[] {0,0,255}, "blue");//b
            map.addTrainVector(new Integer[] {0,100,0}, "dark green");//dg
            map.addTrainVector(new Integer[] {0,0,139}, "dark blue");//db
            map.addTrainVector(new Integer[] {255,255,0}, "yellow");//y
            map.addTrainVector(new Integer[] {255,165,0}, "orange");//o
            map.addTrainVector(new Integer[] {128,0,128}, "purple");//p
//        
//          map.addTrainVector(new Integer[] {255,255,255});//p
//          map.addTrainVector(new Integer[] {0,0,0});//p
            
            //train
            map.train();
        }
        else{
            JOptionPane.showMessageDialog(this, "Ошибка чтения параметров.");        
        }
    }//GEN-LAST:event_trainButtonActionPerformed

    /**
     * проверка правильности ввода при изменении 
     * @param evt 
     */
    private void inputChanged(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputChanged
        checkInput();
    }//GEN-LAST:event_inputChanged

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        //входной вектор
        String inputVectorString = InputVectorTextField.getText();
        
        //разделение запятыми
        String[] vectorParts = inputVectorString.split(",");
        
        // (0..1, 0..1, 0..1)
        Double[] inputVector = new Double[] {Integer.valueOf(vectorParts[0]) / 255d, Integer.valueOf(vectorParts[1]) / 255d, Integer.valueOf(vectorParts[2]) / 255d};
        
        map.findVector(inputVector);
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        //загрузка данных     
        Map<Integer[],String> trainData = DataLoader.getTrainData();
        
        //Список тестовых данных
        testDataComboBox.removeAllItems();
        Set<String> testNames = DataLoader.getTestNames();
        for(String name:testNames){
            testDataComboBox.addItem(name);            
        }
        
        //проверка ввода на ошибки
        boolean inputHasErrors = checkInput();
        
        //если ввод без ошибок
        if(!inputHasErrors){
            
            //создать карту
            map = initKohonenMap();
            
            //train set
            for(Integer[] vector:trainData.keySet()){
                map.addTrainVector(vector, trainData.get(vector));
            }
            
            //train
            map.train();
        }
        else{
            JOptionPane.showMessageDialog(this, "Ошибка чтения параметров.");        
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void inputTestDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTestDataButtonActionPerformed
        // test data
        Map<Integer[],String> testData = DataLoader.getTestData();
        
        //оставить только выбранные
        String filter = (String) testDataComboBox.getSelectedItem();
        
        //filtered data
        Map<Integer[],String> filteredData = new HashMap<>();
        
        for(Integer[] key:testData.keySet()){
            if(testData.get(key).equals(filter)){
                filteredData.put(key, filter);
            }
        }
        
        //input testdata
        map.inputTestData(filteredData.keySet());
    }//GEN-LAST:event_inputTestDataButtonActionPerformed

    private void LVQTrainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LVQTrainButtonActionPerformed
        //загрузка данных     
        Map<Integer[],String> trainData = DataLoader.getTrainData();
        
        //Список тестовых данных
        LVQTestDataComboBox.removeAllItems();
        Set<String> testNames = DataLoader.getTestNames();
        for(String name:testNames){
            LVQTestDataComboBox.addItem(name);            
        }
        
        //проверка ввода на ошибки
        boolean inputHasErrors = checkInput();
        
        //если ввод без ошибок
        if(!inputHasErrors){
            
            int numClasses = testNames.size();
            //создать карту
            lvq = initLVQ(numClasses);
            
            //train set
            for(Integer[] vector:trainData.keySet()){
                lvq.addTrainVector(vector, trainData.get(vector));
            }
            
            //train
            lvq.train();
        }
        else{
            JOptionPane.showMessageDialog(this, "Ошибка чтения параметров.");        
        }
    }//GEN-LAST:event_LVQTrainButtonActionPerformed

    private void LVQTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LVQTestButtonActionPerformed
        // test data
        Map<Integer[],String> testData = DataLoader.getTestData();
        
        //оставить только выбранные
        String filter = (String) LVQTestDataComboBox.getSelectedItem();
        
        //filtered data
        Map<Integer[],String> filteredData = new HashMap<>();
        
        for(Integer[] key:testData.keySet()){
            if(testData.get(key).equals(filter)){
                filteredData.put(key, filter);
            }
        }
        
        //input testdata
        lvq.inputTestData(filteredData.keySet(),filter);
        
    }//GEN-LAST:event_LVQTestButtonActionPerformed

    /**
     * инициализация карты
     * @return 
     */
    private SOMMap initKohonenMap(){
        //ширина (шт. элементов)
        int width = Integer.valueOf(mapWidthTextField.getText());
        
        //высота (шт. элементов)
        int height = Integer.valueOf(mapHeightTextField.getText());
        
        //длина входного вектора
        int vectorLength = 3;
        
        //начальная скорость обучения
        double startLearningRate = Double.valueOf(LRTextField.getText());
        
        //количество итераций
        int iterationLimit = Integer.valueOf(iterationsTextField.getText());
                
        //Kohonen map
        SOMMap map = new SOMMap(width, height, vectorLength, startLearningRate, iterationLimit);
        
        //draw Frame
        map.setDrawFrame(this);
        
        //drawScale
        int drawScale = Integer.valueOf(scaleTextField.getText());
        map.setDrawScale(drawScale);

        return map;
    }
    
    public LVQ initLVQ(int numClasses){
        //длина входного вектора
        int vectorLength = 3;
        
        //начальная скорость обучения
        double startLearningRate = Double.valueOf(LRTextField.getText());
        
        //количество итераций
        int iterationLimit = Integer.valueOf(iterationsTextField.getText());
        
        LVQ newLVQ = new LVQ(vectorLength, numClasses, startLearningRate, iterationLimit);
        
        return newLVQ;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField InputVectorTextField;
    private javax.swing.JTextField LRTextField;
    private javax.swing.JButton LVQTestButton;
    private javax.swing.JComboBox<String> LVQTestDataComboBox;
    private javax.swing.JButton LVQTrainButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton inputTestDataButton;
    private javax.swing.JTextField iterationsTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextField mapHeightTextField;
    private javax.swing.JTextField mapWidthTextField;
    private javax.swing.JTextField scaleTextField;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JComboBox<String> testDataComboBox;
    private javax.swing.JButton trainButton;
    // End of variables declaration//GEN-END:variables

}
